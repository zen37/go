package main

import (
	"fmt"
	"os"
	"path/filepath"
	"flag"
)

const (
	_  = iota
	KB = 1 << (10 * iota)
	MB
	GB
)

const thresholdFileSize = 1000000000
const dir string =  "/" // "/Users/zen" //"/Users/zen/Documents"-

var err_show *bool

func init() {

	err_show = flag.Bool("err", false, "this is a boolean for printing or not errors. default is false")

	flag.Parse()
}

func main() {

	if *err_show {
		fmt.Println("errors are printed")
	} else {
		fmt.Println("errors are not printed")
	}

	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			if *err_show {
				fmt.Printf("Error %q: %v\n", path, err)
			}
			return nil //err, program stops if error is encountered, 
			           //for example ERR: open /Users/zen/.Trash: operation not permitted
		}
		if !info.IsDir() {
			getFormattedFileSize(path, info);
		} else {
			// fmt.Printf("dir: %q\n", path)			
		}
		return nil
	})

	check(err)

}

func getFileSize(filepath string) (int64, error) {
	fi, err := os.Stat(filepath)
	if err != nil {
		return 0, err
	}
	// get the size
	return fi.Size(), nil
}

func getFormattedFileSize(path string, info os.FileInfo) {

		size := info.Size();
		//file := info.Name(); 
	    
		if size >  thresholdFileSize  {
			filesize := float64(size);
			fmt.Print(path, " : ")
			fmt.Printf("%.2fMB\n", filesize/MB)
		}
	}

func check(e error) {
	if e != nil {
		fmt.Println("ERR:", e)
		// panic(e)
	}
}
