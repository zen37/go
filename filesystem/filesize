package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"sort" 
)

const (
	_  = iota
	KB = 1 << (10 * iota)
	MB
	GB
)

const dir string = "/" 

var err_show *bool
var size *int

var thresholdFileSize int64

type file struct {
	name string
	size float64
}

var files []file

func init() {

	err_show = flag.Bool("err", false, "this is a boolean for printing or not errors. default is false")
	size = flag.Int("size", 100000000, "the minimum file size")

	flag.Parse()

	thresholdFileSize = int64(*size)
}

func main() {

	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			if *err_show {
				fmt.Printf("Path/Error %q: %v\n", path, err)
			}
			return nil //err, program stops if error is encountered, and we don't want this
		}
		if !info.IsDir() {
			getFormattedFileSize(path, info)
		} else {
			// fmt.Printf("dir: %q\n", path)
		}
		return nil
	})

	check(err)

	sort.Slice(files, func(i, j int) bool { return files[i].size < files[j].size })
	print()

}

func getFileSize(filepath string) (int64, error) {

	fi, err := os.Stat(filepath)
	if err != nil {
		return 0, err
	}
	return fi.Size(), nil
}

func getFormattedFileSize(path string, info os.FileInfo) {

	size := info.Size()

	if size > thresholdFileSize {
		filesize := float64((size)/MB)
		files = append(files, file{name: path, size:filesize})
	}
}

func print(){

	for _, elem := range files{
		fmt.Println(elem.name, elem.size)
	}

}

func check(e error) {
	if e != nil {
		fmt.Println("ERR:", e)
		// panic(e)
	}
}
